#ifndef ElasticMomentumCorrections
#define ElasticMomentumCorrections

double MomemtumCorrection_CLAS12_inbending(float Px, float Py, float Pz, int sec, int ivec)
{
	// ivec = 0 --> Electron Corrections
	// ivec = 1 --> π+ Corrections
	// ivec = 2 --> π- Corrections
	// ivec = 3 --> Proton Corrections (NOT UPDATED YET)

	// Momentum Magnitude
	double pp = sqrt(Px * Px + Py * Py + Pz * Pz);

	// Initializing the correction factor
	double dp = 0;

	// Defining Phi Angle
	double Phi = (180 / 3.1415926) * atan2(Py, Px);

	// (Initial) Shift of the Phi Angle (done to realign sectors whose data is separated when plotted from ±180˚)
	if (((sec == 4 || sec == 3) && Phi < 0) || (sec > 4 && Phi < 90))
	{
		Phi += 360;
	}

	// Getting Local Phi Angle
	double PhiLocal = Phi - (sec - 1) * 60;

	// Applying Shift Functions to Phi Angles (local shifted phi = phi)
	double phi = PhiLocal;

	// For Electron Shift
	if (ivec == 0)
	{
		phi = PhiLocal - 30 / pp;
	}

	// For π+ Pion/Proton Shift
	if (ivec == 1 || ivec == 3)
	{
		phi = PhiLocal + (32 / (pp - 0.05));
	}

	// For π- Pion Shift
	if (ivec == 2)
	{
		phi = PhiLocal - (32 / (pp - 0.05));
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//==================================================================================================================================//
	//=======================//=======================//     Electron Corrections     //=======================//=======================//
	//==================================================================================================================================//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if (ivec == 0)
	{
		if (sec == 1)
		{
			// The CONTINUOUS QUADRATIC function predicted for ∆p_{El} for [Cor = Uncorrected][Sector 1] is:
			dp = ((-4.3303e-06) * phi * phi + (1.1006e-04) * phi + (-5.7235e-04)) * pp * pp + ((3.2555e-05) * phi * phi + (-0.0014559) * phi + (0.0014878)) * pp + ((-1.9577e-05) * phi * phi + (0.0017996) * phi + (0.025963));
		}
		if (sec == 2)
		{
			// The CONTINUOUS QUADRATIC function predicted for ∆p_{El} for [Cor = Uncorrected][Sector 2] is:
			dp = ((-9.8045e-07) * phi * phi + (6.7395e-05) * phi + (-4.6757e-05)) * pp * pp + ((-1.4958e-05) * phi * phi + (-0.0011191) * phi + (-0.0025143)) * pp + ((1.2699e-04) * phi * phi + (0.0033121) * phi + (0.020819));
		}
		if (sec == 3)
		{
			// The CONTINUOUS QUADRATIC function predicted for ∆p_{El} for [Cor = Uncorrected][Sector 3] is:
			dp = ((-5.9459e-07) * phi * phi + (-2.8289e-05) * phi + (-4.3541e-04)) * pp * pp + ((-1.5025e-05) * phi * phi + (5.7730e-04) * phi + (-0.0077582)) * pp + ((7.3348e-05) * phi * phi + (-0.001102) * phi + (0.057052));
		}
		if (sec == 4)
		{
			// The CONTINUOUS QUADRATIC function predicted for ∆p_{El} for [Cor = Uncorrected][Sector 4] is:
			dp = ((-2.2714e-06) * phi * phi + (-3.0360e-05) * phi + (-8.9322e-04)) * pp * pp + ((2.9737e-05) * phi * phi + (5.1142e-04) * phi + (0.0045641)) * pp + ((-1.0582e-04) * phi * phi + (-5.6852e-04) * phi + (0.027506));
		}
		if (sec == 5)
		{
			// The CONTINUOUS QUADRATIC function predicted for ∆p_{El} for [Cor = Uncorrected][Sector 5] is:
			dp = ((-1.1490e-06) * phi * phi + (-6.2147e-06) * phi + (-4.7235e-04)) * pp * pp + ((3.7039e-06) * phi * phi + (-1.5943e-04) * phi + (-8.5238e-04)) * pp + ((4.4069e-05) * phi * phi + (0.0014152) * phi + (0.031933));
		}
		if (sec == 6)
		{
			// The CONTINUOUS QUADRATIC function predicted for ∆p_{El} for [Cor = Uncorrected][Sector 6] is:
			dp = ((1.1076e-06) * phi * phi + (4.0156e-05) * phi + (-1.6341e-04)) * pp * pp + ((-2.8613e-05) * phi * phi + (-5.1861e-04) * phi + (-0.0056437)) * pp + ((1.2419e-04) * phi * phi + (4.9084e-04) * phi + (0.049976));
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//====================================================================================================================================//
	//======================//======================//     Electron Corrections (End)     //======================//======================//
	//====================================================================================================================================//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//====================================================================================================================================//
	//=========================//=========================//     π+ Corrections     //=========================//=========================//
	//====================================================================================================================================//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (ivec == 1)
	{
		if (sec == 1)
		{
			dp = ((-5.4904e-07) * phi * phi + (-1.4436e-05) * phi + (3.1534e-04)) * pp * pp + ((3.8231e-06) * phi * phi + (3.6582e-04) * phi + (-0.0046759)) * pp + ((-5.4913e-06) * phi * phi + (-4.0157e-04) * phi + (0.010767));
			dp = dp + ((6.1103e-07) * phi * phi + (5.5291e-06) * phi + (-1.9120e-04)) * pp * pp + ((-3.2300e-06) * phi * phi + (1.5377e-05) * phi + (7.5279e-04)) * pp + ((2.1434e-06) * phi * phi + (-6.9572e-06) * phi + (-7.9333e-05));
			dp = dp + ((-1.3049e-06) * phi * phi + (1.1295e-05) * phi + (4.5797e-04)) * pp * pp + ((9.3122e-06) * phi * phi + (-5.1074e-05) * phi + (-0.0030757)) * pp + ((-1.3102e-05) * phi * phi + (2.2153e-05) * phi + (0.0040938));
		}
		if (sec == 2)
		{
			dp = ((-1.0087e-06) * phi * phi + (2.1319e-05) * phi + (7.8641e-04)) * pp * pp + ((6.7485e-06) * phi * phi + (7.3716e-05) * phi + (-0.0094591)) * pp + ((-1.1820e-05) * phi * phi + (-3.8103e-04) * phi + (0.018936));
			dp = dp + ((8.8155e-07) * phi * phi + (-2.8257e-06) * phi + (-2.6729e-04)) * pp * pp + ((-5.4499e-06) * phi * phi + (3.8397e-05) * phi + (0.0015914)) * pp + ((6.8926e-06) * phi * phi + (-5.9386e-05) * phi + (-0.0021749));
			dp = dp + ((-2.0147e-07) * phi * phi + (1.1061e-05) * phi + (3.8827e-04)) * pp * pp + ((4.9294e-07) * phi * phi + (-6.0257e-05) * phi + (-0.0022087)) * pp + ((9.8548e-07) * phi * phi + (5.9047e-05) * phi + (0.0022905));
		}
		if (sec == 3)
		{
			dp = ((8.6722e-08) * phi * phi + (-1.7975e-05) * phi + (4.8118e-05)) * pp * pp + ((2.6273e-06) * phi * phi + (3.1453e-05) * phi + (-0.0015943)) * pp + ((-6.4463e-06) * phi * phi + (-5.8990e-05) * phi + (0.0041703));
			dp = dp + ((9.6317e-07) * phi * phi + (-1.7659e-06) * phi + (-8.8318e-05)) * pp * pp + ((-5.1346e-06) * phi * phi + (8.3318e-06) * phi + (3.7723e-04)) * pp + ((3.9548e-06) * phi * phi + (-6.9614e-05) * phi + (2.1393e-04));
			dp = dp + ((5.6438e-07) * phi * phi + (8.1678e-06) * phi + (-9.4406e-05)) * pp * pp + ((-3.9074e-06) * phi * phi + (-6.5174e-05) * phi + (5.4218e-04)) * pp + ((6.3198e-06) * phi * phi + (1.0611e-04) * phi + (-4.5749e-04));
		}
		if (sec == 4)
		{
			dp = ((4.3406e-07) * phi * phi + (-4.9036e-06) * phi + (2.3064e-04)) * pp * pp + ((1.3624e-06) * phi * phi + (3.2907e-05) * phi + (-0.0034872)) * pp + ((-5.1017e-06) * phi * phi + (2.4593e-05) * phi + (0.0092479));
			dp = dp + ((6.0218e-07) * phi * phi + (-1.4383e-05) * phi + (-3.1999e-05)) * pp * pp + ((-1.1243e-06) * phi * phi + (9.3884e-05) * phi + (-4.1985e-04)) * pp + ((-1.8808e-06) * phi * phi + (-1.2222e-04) * phi + (0.0014037));
			dp = dp + ((-2.5490e-07) * phi * phi + (-8.5120e-07) * phi + (7.9109e-05)) * pp * pp + ((2.5879e-06) * phi * phi + (8.6108e-06) * phi + (-5.1533e-04)) * pp + ((-4.4521e-06) * phi * phi + (-1.7012e-05) * phi + (7.4848e-04));
		}
		if (sec == 5)
		{
			dp = ((2.4292e-07) * phi * phi + (8.8741e-06) * phi + (2.9482e-04)) * pp * pp + ((3.7229e-06) * phi * phi + (7.3215e-06) * phi + (-0.0050685)) * pp + ((-1.1974e-05) * phi * phi + (-1.3043e-04) * phi + (0.0078836));
			dp = dp + ((1.0867e-06) * phi * phi + (-7.7630e-07) * phi + (-4.4930e-05)) * pp * pp + ((-5.6564e-06) * phi * phi + (-1.3417e-05) * phi + (2.5224e-04)) * pp + ((6.8460e-06) * phi * phi + (9.0495e-05) * phi + (-4.6587e-04));
			dp = dp + ((8.5720e-07) * phi * phi + (-6.7464e-06) * phi + (-4.0944e-05)) * pp * pp + ((-4.7370e-06) * phi * phi + (5.8808e-05) * phi + (1.9047e-04)) * pp + ((5.7404e-06) * phi * phi + (-1.1105e-04) * phi + (-1.9392e-04));
		}
		if (sec == 6)
		{
			dp = ((2.1191e-06) * phi * phi + (-3.3710e-05) * phi + (2.5741e-04)) * pp * pp + ((-1.2915e-05) * phi * phi + (2.3753e-04) * phi + (-2.6882e-04)) * pp + ((2.2676e-05) * phi * phi + (-2.3115e-04) * phi + (-0.001283));
			dp = dp + ((6.0270e-07) * phi * phi + (-6.8200e-06) * phi + (1.3103e-04)) * pp * pp + ((-1.8745e-06) * phi * phi + (3.8646e-05) * phi + (-8.8056e-04)) * pp + ((2.0885e-06) * phi * phi + (-3.4932e-05) * phi + (4.5895e-04));
			dp = dp + ((4.7349e-08) * phi * phi + (-5.7528e-06) * phi + (-3.4097e-06)) * pp * pp + ((1.7731e-06) * phi * phi + (3.5865e-05) * phi + (-5.7881e-04)) * pp + ((-9.7008e-06) * phi * phi + (-4.1836e-05) * phi + (0.0035403));
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//====================================================================================================================================//
	//=========================//=========================//  π+ Corrections (End)  //=========================//=========================//
	//====================================================================================================================================//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//====================================================================================================================================//
	//==================//==================//    π- Corrections (Updated as of 01-13-2023)    //==================//==================//
	//====================================================================================================================================//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if (ivec == 2)
	{
		if (sec == 1)
		{
			dp = (-1.6287E-05 * phi * phi + -4.9698E-04 * phi + -1.5461E-03) * pp * pp + (6.1162E-05 * phi * phi + 1.5151E-03 * phi + -6.2379E-03) * pp + -5.2911E-05 * phi * phi + -1.1023E-03 * phi + 3.3557E-02 - 0.008;
		}
		if (sec == 2)
		{
			dp = (1.4819E-06 * phi * phi + -3.7222E-05 * phi + 1.3426E-03) * pp * pp + (-1.4990E-06 * phi * phi + 9.6467E-05 * phi + -1.9363E-02) * pp + 1.1426E-06 * phi * phi + 4.5750E-05 * phi + 3.7193E-02 - 0.005;
		}

		if (sec == 3)
		{
			dp = (-1.2521E-05 * phi * phi + -4.0605E-05 * phi + 7.1584E-04) * pp * pp + (5.5105E-05 * phi * phi + 3.5087E-04 * phi + -1.9071E-02) * pp + -4.9659E-05 * phi * phi + -2.9078E-04 * phi + 3.6345E-02 - 0.005;
		}

		if (sec == 4)
		{
			dp = (-4.6480E-07 * phi * phi + -1.7373E-06 * phi + 3.4723E-03) * pp * pp + (6.8267E-07 * phi * phi + 1.3368E-04 * phi + -2.4534E-02) * pp + 9.9275E-06 * phi * phi + -1.5813E-04 * phi + 4.0981E-02 - 0.004;
		}

		if (sec == 5)
		{
			dp = (-2.7381E-06 * phi * phi + 6.2363E-05 * phi + 1.3284E-03 - 0.004) * pp * pp + (8.3662E-06 * phi * phi + -2.0197E-04 * phi + -1.5436E-02 + 0.01) * pp + -1.3453E-05 * phi * phi + 9.2336E-07 * phi + 3.8825E-02 - 0.008;
		}

		if (sec == 6)
		{
			dp = (4.7125E-06 * phi * phi + 9.8559E-05 * phi + -1.8335E-03) * pp * pp + (-1.8723E-05 * phi * phi + -5.5862E-04 * phi + -5.5286E-03) * pp + 1.7244E-05 * phi * phi + 4.8344E-04 * phi + 3.0237E-02 - 0.008;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//====================================================================================================================================//
	//=======================//=======================//      π- Corrections (End)      //=======================//=======================//
	//====================================================================================================================================//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//====================================================================================================================================//
	//=======================//=======================//     All Proton Corrections     //=======================//=======================//
	//====================================================================================================================================//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (ivec == 3)
	{
		if (sec == 1)
		{
			dp = ((1 + TMath::Sign(1, (pp - 1.4))) / 2) * ((4.4034e-03) * pp + (-0.01703)) + ((1 + TMath::Sign(1, -(pp - 1.4))) / 2) * ((-0.10898) * (pp - 1.4) * (pp - 1.4) + (-0.09574) * (pp - 1.4) + ((4.4034e-03) * 1.4 + (-0.01703)));
		}
		if (sec == 2)
		{
			dp = ((1 + TMath::Sign(1, (pp - 1.5))) / 2) * ((0.01318) * pp + (-0.03403)) + ((1 + TMath::Sign(1, -(pp - 1.5))) / 2) * ((-0.09829) * (pp - 1.5) * (pp - 1.5) + (-0.0986) * (pp - 1.5) + ((0.01318) * 1.5 + (-0.03403)));
		}
		if (sec == 3)
		{
			dp = ((1 + TMath::Sign(1, (pp - 1.05))) / 2) * ((-4.7052e-03) * pp + (1.2410e-03)) + ((1 + TMath::Sign(1, -(pp - 1.05))) / 2) * ((-0.22721) * (pp - 1.05) * (pp - 1.05) + (-0.09702) * (pp - 1.05) + ((-4.7052e-03) * 1.05 + (1.2410e-03)));
		}
		if (sec == 4)
		{
			dp = ((1 + TMath::Sign(1, (pp - 1.4))) / 2) * ((-1.0900e-03) * pp + (-4.0573e-03)) + ((1 + TMath::Sign(1, -(pp - 1.4))) / 2) * ((-0.09236) * (pp - 1.4) * (pp - 1.4) + (-0.073) * (pp - 1.4) + ((-1.0900e-03) * 1.4 + (-4.0573e-03)));
		}
		if (sec == 5)
		{
			dp = ((1 + TMath::Sign(1, (pp - 1.5))) / 2) * ((7.3965e-03) * pp + (-0.02428)) + ((1 + TMath::Sign(1, -(pp - 1.5))) / 2) * ((-0.09539) * (pp - 1.5) * (pp - 1.5) + (-0.09263) * (pp - 1.5) + ((7.3965e-03) * 1.5 + (-0.02428)));
		}
		if (sec == 6)
		{
			dp = ((1 + TMath::Sign(1, (pp - 1.15))) / 2) * ((-7.6214e-03) * pp + (8.1014e-03)) + ((1 + TMath::Sign(1, -(pp - 1.15))) / 2) * ((-0.12718) * (pp - 1.15) * (pp - 1.15) + (-0.06626) * (pp - 1.15) + ((-7.6214e-03) * 1.15 + (8.1014e-03)));
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//=====================================================================================================================================//
	//=======================//=======================//    End of Proton Corrections    //=======================//=======================//
	//=====================================================================================================================================//
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	return dp / pp;
}

double MomemtumCorrection_CLAS12_outbending(float Px, float Py, float Pz, int sec, int ivec)
{

	// ivec = 0 --> Electron Corrections
	// ivec = 1 --> Pi+ Corrections
	// ivec = 2 --> Pi- Corrections
	// ivec = 3 --> Proton Corrections

	// Momentum Magnitude
	double pp = sqrt(Px * Px + Py * Py + Pz * Pz);

	// Initializing the correction factor
	double dp = 0;

	// Defining Phi Angle
	double Phi = (180 / 3.1415926) * atan2(Py, Px);

	// (Initial) Shift of the Phi Angle (done to realign sectors whose data is separated when plotted from ±180˚)
	// After this line, the angular distribution will approximately go from 0 to 360˚
	if ((sec == 4 && Phi < 0) || (sec > 4 && Phi < 90))
	{
		Phi += 360;
	}

	// Getting Local Phi Angle
	double PhiLocal = Phi - (sec - 1) * 60;

	// Applying Shift Functions to Phi Angles (local shifted phi = phi)
	double phi = PhiLocal;

	// For Electron Shift
	if (ivec == 0)
	{
		phi = PhiLocal - 30 / pp;
	}

	// For Pi+ Pion/Proton Shift
	if (ivec == 1 || ivec == 3)
	{
		phi = PhiLocal + (32 / (pp - 0.05));
	}

	// For Pi- Pion Shift
	if (ivec == 2)
	{
		phi = PhiLocal - (32 / (pp - 0.05));
	}

	//==========//  PARTICLE = ELECTRON  //==========//

	if (ivec == 0)
	{

		if (sec == 1)
		{
			dp = ((-7.68e-06) * phi * phi + (4.636e-05) * phi + (4.7165e-04)) * pp * pp + ((1.2086e-04) * phi * phi + (2.09591e-05) * phi + (-0.01582)) * pp + ((-4.1002e-04) * phi * phi + (1.7298e-04) * phi + (0.10544));
			dp = dp + ((7.51e-06) * phi * phi + (6.45e-06) * phi + (-0.00152778)) * pp * pp + ((-0.00011089) * phi * phi + (-0.00017683) * phi + (0.02131197)) * pp + ((0.00037962) * phi * phi + (0.00060197) * phi + (-0.06886547));
		}

		if (sec == 2)
		{
			dp = ((-2.69e-06) * phi * phi + (9.252e-05) * phi + (5.1693e-04)) * pp * pp + ((3.016e-05) * phi * phi + (-6.0141e-04) * phi + (-0.0146)) * pp + ((-6.09e-05) * phi * phi + (1.604e-03) * phi + (0.09208));
			dp = dp + ((1.24e-06) * phi * phi + (-4.735e-05) * phi + (-0.00150312)) * pp * pp + ((-2.097e-05) * phi * phi + (0.00049518) * phi + (0.01920915)) * pp + ((7.474e-05) * phi * phi + (-0.00132086) * phi + (-0.05686766));
		}

		if (sec == 3)
		{
			dp = ((-1.045e-05) * phi * phi + (-6.491e-05) * phi + (1.1362e-03)) * pp * pp + ((1.2512e-04) * phi * phi + (5.3421e-04) * phi + (-0.0174)) * pp + ((-3.0891e-04) * phi * phi + (-1.5332e-03) * phi + (0.09389));
			dp = dp + ((6.94e-06) * phi * phi + (4.271e-05) * phi + (-0.00182765)) * pp * pp + ((-8.322e-05) * phi * phi + (-0.00042238) * phi + (0.01994986)) * pp + ((0.00021956) * phi * phi + (0.00103844) * phi + (-0.04956505));
		}

		if (sec == 4)
		{
			dp = ((-7.37e-06) * phi * phi + (-8.13e-06) * phi + (9.2425e-04)) * pp * pp + ((1.1312e-04) * phi * phi + (-5.24444e-05) * phi + (-0.022944)) * pp + ((-3.518e-04) * phi * phi + (3.1893e-04) * phi + (0.1323));
			dp = dp + ((8.74e-06) * phi * phi + (-1.617e-05) * phi + (-0.00173764)) * pp * pp + ((-0.00011774) * phi * phi + (0.00024329) * phi + (0.02310896)) * pp + ((0.00036368) * phi * phi + (-0.00076238) * phi + (-0.07050779));
		}

		if (sec == 5)
		{
			dp = ((-8.17e-06) * phi * phi + (-1.681e-05) * phi + (7.8066e-04)) * pp * pp + ((1.4176e-04) * phi * phi + (4.1096e-04) * phi + (-0.026944)) * pp + ((-4.4153e-04) * phi * phi + (-1.3535e-03) * phi + (0.1486));
			dp = dp + ((7.69e-06) * phi * phi + (1.774e-05) * phi + (-1.57552e-03)) * pp * pp + ((-1.0778e-04) * phi * phi + (-2.6133e-04) * phi + (0.02076174)) * pp + ((3.196e-04) * phi * phi + (8.8134e-04) * phi + (-0.06204126));
		}

		if (sec == 6)
		{
			dp = ((1.63e-06) * phi * phi + (6.251e-05) * phi + (-2.2457e-04)) * pp * pp + ((8.18e-06) * phi * phi + (-6.688e-04) * phi + (4.2875e-04)) * pp + ((-2.172e-05) * phi * phi + (1.5467e-03) * phi + (0.05676));
			dp = dp + ((1.34e-06) * phi * phi + (-1.574e-05) * phi + (-0.00133653)) * pp * pp + ((-1.991e-05) * phi * phi + (0.00024404) * phi + (0.01428837)) * pp + ((5.149e-05) * phi * phi + (-0.0007992) * phi + (-0.03467815));
		}
	}

	//==========//  PARTICLE = ELECTRON (End)  //==========//

	//==========//  PARTICLE = PI+ PION  //==========//

	if (ivec == 1)
	{

		if (sec == 1)
		{
			dp = ((5.7e-07) * phi * phi + (-2.531e-05) * phi + (3.2253e-04)) * pp * pp + ((2.12e-06) * phi * phi + (-3.6741e-04) * phi + (-0.01378)) * pp + ((-1.215e-05) * phi * phi + (4.275e-04) * phi + (0.04561));
			dp = dp + ((-2.12e-06) * phi * phi + (3.185e-05) * phi + (0.00178389)) * pp * pp + ((1.262e-05) * phi * phi + (-0.00012324) * phi + (-0.01494883)) * pp + ((-1.422e-05) * phi * phi + (0.00021045) * phi + (0.02590949));
		}

		if (sec == 2)
		{
			dp = ((-4e-08) * phi * phi + (-9.836e-05) * phi + (3.142e-04)) * pp * pp + ((8.6e-07) * phi * phi + (4.6073e-04) * phi + (-0.0136)) * pp + ((8.09e-06) * phi * phi + (-6.0253e-04) * phi + (0.03594));
			dp = dp + ((-9.8e-07) * phi * phi + (3.974e-05) * phi + (0.00159441)) * pp * pp + ((6.61e-06) * phi * phi + (-0.00023934) * phi + (-0.01295355)) * pp + ((-1.087e-05) * phi * phi + (0.00027704) * phi + (0.02013232));
		}

		if (sec == 3)
		{
			dp = ((-1.37e-06) * phi * phi + (3.759e-05) * phi + (7.4895e-04)) * pp * pp + ((8.45e-06) * phi * phi + (1.464e-04) * phi + (-0.01952)) * pp + ((-1.41e-06) * phi * phi + (-3.5781e-04) * phi + (0.0353));
			dp = dp + ((-3.2e-07) * phi * phi + (-2.98e-06) * phi + (0.00144252)) * pp * pp + ((2.9e-06) * phi * phi + (-5.719e-05) * phi + (-0.01197579)) * pp + ((-5.74e-06) * phi * phi + (0.00024614) * phi + (0.02228774));
		}

		if (sec == 4)
		{
			dp = ((2.7e-06) * phi * phi + (5.028e-05) * phi + (9.007e-04)) * pp * pp + ((-1.548e-05) * phi * phi + (-6.141e-05) * phi + (-0.0151)) * pp + ((2.063e-05) * phi * phi + (1.7882e-04) * phi + (0.03522));
			dp = dp + ((-8.2e-07) * phi * phi + (-2.606e-05) * phi + (0.00102121)) * pp * pp + ((6.32e-06) * phi * phi + (0.00013252) * phi + (-0.00898872)) * pp + ((-9.79e-06) * phi * phi + (-0.00017861) * phi + (0.01654247));
		}

		if (sec == 5)
		{
			dp = ((2.2e-06) * phi * phi + (-1.554e-05) * phi + (5.465e-04)) * pp * pp + ((-1.06e-05) * phi * phi + (1.226e-04) * phi + (-0.01651)) * pp + ((1.039e-05) * phi * phi + (-2.062e-04) * phi + (0.0436));
			dp = dp + ((-5.8e-07) * phi * phi + (-1.4e-07) * phi + (0.00129068)) * pp * pp + ((5.43e-06) * phi * phi + (-2.262e-05) * phi + (-0.01076443)) * pp + ((-7.78e-06) * phi * phi + (0.00010021) * phi + (0.01975448));
		}

		if (sec == 6)
		{
			dp = ((1.11e-06) * phi * phi + (-1e-08) * phi + (6.88e-05)) * pp * pp + ((-8.86e-06) * phi * phi + (-5.94e-05) * phi + (-0.01133)) * pp + ((1.919e-05) * phi * phi + (-2.444e-04) * phi + (0.03491));
			dp = dp + ((-1.15e-06) * phi * phi + (6.34e-06) * phi + (0.00196799)) * pp * pp + ((1.196e-05) * phi * phi + (-0.00010685) * phi + (-0.01774286)) * pp + ((-2.573e-05) * phi * phi + (0.00042626) * phi + (0.03688378));
		}
	}

	//==========//  PARTICLE = PI+ PION (End)  //==========//

	//==========//  PARTICLE = PI- PION (From Nick Trotta)  //==========//

	if (ivec == 2)
	{

		if (sec == 1)
		{
			dp = ((2.7123584594392597e-06) * phi * phi + (-5.468601175954242e-05) * phi + (0.002313330256974031)) * pp * pp + ((-8.039703360516874e-06) * phi * phi + (0.00044464879674067275) * phi + (-0.02546911446157775)) * pp + ((3.5973669277966655e-06) * phi * phi + (-0.0003856844699023182) * phi + (0.05496480659602064) - 0.015);
		}

		if (sec == 2)
		{
			dp = ((1.9081500905303347e-06) * phi * phi + (3.310647986349362e-05) * phi + (-0.0003264357817968204)) * pp * pp + ((-1.2306311457915714e-05) * phi * phi + (-6.404982516446639e-05) * phi + (-0.01287404671840319)) * pp + ((9.746651642120768e-06) * phi * phi + (6.1503461629194e-05) * phi + (0.04249861359511857) - 0.015);
		}

		if (sec == 3)
		{
			dp = ((3.467960715633796e-06) * phi * phi + (-0.00011427345789836184) * phi + (0.004780571116355615)) * pp * pp + ((-1.2639455891842017e-05) * phi * phi + (0.00044737258600913664) * phi + (-0.03827009444373719)) * pp + ((5.8243648992776484e-06) * phi * phi + (-0.0004240381542174731) * phi + (0.06589846610477122) - 0.015);
		}

		if (sec == 4)
		{
			dp = ((-7.97757466039691e-06) * phi * phi + (-0.00011075801628158914) * phi + (0.006505144041475733)) * pp * pp + ((3.570788801587046e-05) * phi * phi + (0.0005835525352273808) * phi + (-0.045031773715754606)) * pp + ((-3.223327114068019e-05) * phi * phi + (-0.0006144362450858762) * phi + (0.07280937684254037) - 0.015);
		}

		if (sec == 5)
		{
			dp = ((1.990802625607816e-06) * phi * phi + (7.057771450607931e-05) * phi + (0.005399025205722829)) * pp * pp + ((-7.670376562908147e-06) * phi * phi + (-0.00032508260930191955) * phi + (-0.044439500813069875)) * pp + ((7.599354976329091e-06) * phi * phi + (0.0002562152836894338) * phi + (0.07195292224032898) - 0.015);
		}

		if (sec == 6)
		{
			dp = ((1.9247834787602347e-06) * phi * phi + (7.638857332736951e-05) * phi + (0.005271258583881754)) * pp * pp + ((-2.7349724034956845e-06) * phi * phi + (-0.00016130256163798413) * phi + (-0.03668300882287307)) * pp + ((7.40942843287096e-07) * phi * phi + (-5.785254680184232e-05) * phi + (0.06282320712979896) - 0.015);
		}
	}

	//==========//  PARTICLE = PI- PION (End)  //==========//

	//==========//  PARTICLE = Proton  //==========//

	if (ivec == 3)
	{

		if (sec == 1)
		{
			dp = (-4.30864e-03) * pp * pp + (1.53688e-02) * pp + (-1.66676e-02);
			dp = dp + ((-4.3301e-04) * pp * pp + (1.4483e-03) * pp + (-1.1343e-03));
		}

		if (sec == 2)
		{
			dp = (-1.29444e-02) * pp * pp + (4.11823e-02) * pp + (-3.4069e-02);
			dp = dp + ((5.2462e-04) * pp * pp + (-1.4881e-03) * pp + (8.0050e-04));
		}

		if (sec == 3)
		{
			dp = (-9.36605e-03) * pp * pp + (3.25537e-02) * pp + (-3.41826e-02);
			dp = dp + ((-1.9155e-03) * pp * pp + (6.1540e-03) * pp + (-4.0436e-03));
		}

		if (sec == 4)
		{
			dp = (-1.45314e-02) * pp * pp + (4.97218e-02) * pp + (-4.43198e-02);
			dp = dp + ((5.9258e-04) * pp * pp + (-3.7177e-04) * pp + (-2.3707e-04));
		}

		if (sec == 5)
		{
			dp = (-1.08441e-02) * pp * pp + (3.89079e-02) * pp + (-3.68669e-02);
			dp = dp + ((-5.5398e-04) * pp * pp + (2.3721e-03) * pp + (-2.3279e-03));
		}

		if (sec == 6)
		{
			dp = (-4.55633e-03) * pp * pp + (1.75565e-02) * pp + (-1.74574e-02);
			dp = dp + ((-1.1516e-03) * pp * pp + (3.0094e-03) * pp + (-8.2480e-04));
		}
	}

	//==========//  PARTICLE = Proton (End)  //==========//

	return dp / pp;
};

class Energy_loss
{
public:
	TF1 *fElectron;
	TF1 *fPositron;
	TF1 *fProtonCD;
	TF1 *fProtonFD_HighTheta;
	TF1 *fProtonFD_LowTheta;

	Energy_loss(bool inbending, bool RGA_Fall2018)
	{

		if (inbending && RGA_Fall2018)
		{

			fElectron = new TF1("fElectron", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fElectron->SetParameters(9.12163, 3.82015, -0.494202, -5.99238e-05, 2.48287e-05, -4.64859e-06);
			fPositron = new TF1("fPositron", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fPositron->SetParameters(7.41971, 3.48004, -0.571027, -4.44993e-05, 1.29072e-05, -5.74303e-06);
			fProtonCD = new TF1("fProtonCD", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonCD->SetParameters(29.1322, 4.6503, -4.38504, -9.75476e-05, 0.000154144, -3.08242e-08);
			fProtonFD_HighTheta = new TF1("fProtonFD_HighTheta", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonFD_HighTheta->SetParameters(53.038, 5.36114, -3.85085, -0.000139053, 0.000272721, -0.000193624);
			fProtonFD_LowTheta = new TF1("fProtonFD_LowTheta", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonFD_LowTheta->SetParameters(44.2175, 4.33855, -3.35995, -0.000146557, 0.000265887, -0.000174179);
		}
		else if (!inbending && RGA_Fall2018)
		{

			fElectron = new TF1("fElectron", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fElectron->SetParameters(9.12163, 3.82015, -0.494202, -5.99238e-05, 2.48287e-05, -4.64859e-06);
			fPositron = new TF1("fPositron", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fPositron->SetParameters(7.41971, 3.48004, -0.571027, -4.44993e-05, 1.29072e-05, -5.74303e-06);
			fProtonCD = new TF1("fProtonCD", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonCD->SetParameters(29.1322, 4.6503, -4.38504, -9.75476e-05, 0.000154144, -3.08242e-08);
			fProtonFD_HighTheta = new TF1("fProtonFD_HighTheta", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonFD_HighTheta->SetParameters(53.038, 5.36114, -3.85085, -0.000139053, 0.000272721, -0.000193624);
			fProtonFD_LowTheta = new TF1("fProtonFD_LowTheta", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonFD_LowTheta->SetParameters(44.2175, 4.33855, -3.35995, -0.000146557, 0.000265887, -0.000174179);
		}
		else if (!RGA_Fall2018)
		{

			fElectron = new TF1("fElectron", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fElectron->SetParameters(9.12163, 3.82015, -0.494202, -5.99238e-05, 2.48287e-05, -4.64859e-06);
			fPositron = new TF1("fPositron", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fPositron->SetParameters(7.41971, 3.48004, -0.571027, -4.44993e-05, 1.29072e-05, -5.74303e-06);
			fProtonCD = new TF1("fProtonCD", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonCD->SetParameters(29.1322, 4.6503, -4.38504, -9.75476e-05, 0.000154144, -3.08242e-08);
			fProtonFD_HighTheta = new TF1("fProtonFD_HighTheta", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonFD_HighTheta->SetParameters(53.038, 5.36114, -3.85085, -0.000139053, 0.000272721, -0.000193624);
			fProtonFD_LowTheta = new TF1("fProtonFD_LowTheta", "([0]*exp([1]+[2]*x))   * ( [5] * x * x + [4] * x + [3])");
			fProtonFD_LowTheta->SetParameters(44.2175, 4.33855, -3.35995, -0.000146557, 0.000265887, -0.000174179);
		}
	}

	void Apply_Energy_loss_Electron(Particle *Electron)
	{
		double corr_factor_electron = 1. - fElectron->Eval(Electron->Vector.P());
		Electron->Vector.SetRho(Electron->Vector.P() * corr_factor_electron);
	}
};

Particle RadiativeCorr(Particle vParticle, Particle Photons[], double thetaWin, double thetaWin1, int np)
{

	for (int i = 0; i < np; i++)
	{
		if (Photons[i].Vector.Angle(vParticle.Vector.Vect()) * TMath::RadToDeg() < thetaWin && abs(Photons[i].Vector.Theta() - vParticle.Vector.Theta()) * TMath::RadToDeg() < thetaWin1 && Photons[i].Vector.P() > 0.)
		{
			vParticle.Vector = (vParticle.Vector + Photons[i].Vector);
		}
	}
	return vParticle;
}

#endif
